{
    "input": "Universidad Autónoma de Baja California.\nActividad3.0\nMateria: AyudantiadeextensiónyvinculaciónMicrocontroladores\nTema: Cálculo de tamaño de pelota y medición\nDocente: Dr. Carlos Alberto Aguilar Avelar\nAlumnos: PerezVeraDianaGloria-1163797\nAlejandroCastroRenteria-1183297\nLuisManuelNuñezLopez-1182533\nFecha: 8deoctubrede2024Código de medición de la distancia:\nfrom imutils.video import VideoStream\nfrom scipy.spatial import distance as dist\nfrom imutils import perspective\nfrom imutils import contours\nimport argparse\nimport datetime\nimport imutils\nimport time\nimport cv2\nimport numpy as np\ndef midpoint(ptA, ptB):\nreturn ((ptA[0] + ptB[0]) * 0.5, (ptA[1] + ptB[1]) * 0.5)\nap = argparse.ArgumentParser()\nap.add_argument(\"-v\", \"--video\", help=\"path to the video file\") #Sise\ndeja asi entonces usa la webcam\nap.add_argument(\"-a\", \"--min-area\", type=int, default=100, help=\"minimum\narea size\")\nargs = vars(ap.parse_args())\n# if the video argument is None, then we are reading from webcam\nif args.get(\"video\", None) is None:\nvs = VideoStream(src=2).start()\ntime.sleep(2.0)\nelse:\nvs = cv2.VideoCapture(args[\"video\"])\nfirstFrame = None\nwidth = 40 # ancho de la pelota en mm, 4cm\nwhile True:\n# grab the current frame and initialize the occupied/unoccupied\n# text\nframe = vs.read()\nframe = frame if args.get(\"video\", None) is None else frame[1]\ntext = \"Unoccupied\"\n# if the frame could not be grabbed, then we have reached the end\n# of the video\nif frame is None:\nbreak\n# resize the frame, convert it to grayscale, and blur it\nframe = imutils.resize(frame, width=500)\ngray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\ngray = cv2.GaussianBlur(gray, (7, 7), 0) #Posible Cambio Nivel\nchido = 7,7# if the first frame is None, initialize it\nif firstFrame is None:\nfirstFrame = gray\ncontinue\nframeDelta = cv2.absdiff(firstFrame, gray)\nthresh = cv2.threshold(frameDelta, 30, 255, cv2.THRESH_BINARY)[1]\n#Posible a cambiar nivel chido 30\n# dilate the thresholded image to fill in holes, then find\ncontours\n# on thresholded image\nthresh = cv2.dilate(thresh, None, iterations=12) #Es el que mas\nsirve para cambiarlo, nivel chido 12\ncnts = cv2.findContours(thresh.copy(),\ncv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ncnts = imutils.grab_contours(cnts)\n# loop over the contours\nfor c in cnts:\n# if the contour is too small, ignore it\nif cv2.contourArea(c) < args[\"min_area\"]:\ncontinue\n# compute the bounding box for the contour, draw it on the\nframe,\n# and update the text\n(x, y, w, h) = cv2.boundingRect(c)\ncv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)\nbox = cv2.minAreaRect(c)\nbox = cv2.cv.BoxPoints(box) if imutils.is_cv2() else\ncv2.boxPoints(box)\nbox = np.array(box, dtype=\"int\")\nbox = perspective.order_points(box)\ncX = np.average(box[:, 0])\ncY = np.average(box[:, 1])\n(tl, tr, br, bl) = box\n(tlblX, tlblY) = midpoint(tl, bl)\n(trbrX, trbrY) = midpoint(tr, br)\nD = dist.euclidean((tlblX, tlblY), (trbrX, trbrY))\nrefObj = (box, (cX, cY), D / width)\nrefCoords = np.vstack([refObj[0], refObj[1]]) ##Aqui\n[xA, yA] = refCoords[4]\nxB = 0\nyB = 0\ncolor =(240, 0, 159)\ncv2.line(frame, (int(xA), int(yA)), (int(xB), int(yB)),\ncolor, 2)\nD = dist.euclidean((xA, yA), (xB, yB)) / refObj[2](mX, mY) = midpoint((xA, yA), (xB, yB))\ncv2.putText(frame, \"{:.1f}mm\".format(D), (int(mX), int(mY -\n10)),\ncv2.FONT_HERSHEY_SIMPLEX, 0.55, color, 2)\nvideo = vs.stream\nfps = str(video.get(cv2.CAP_PROP_FPS))\ncv2.putText(frame, datetime.datetime.now().strftime(\"%A %d %B %Y\n%I:%M:%S%p\") +\" \"+fps+\" fps\" ,(10, frame.shape[0] - 10),\ncv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 255), 1)\n# show the frame and record if the user presses a key\ncv2.imshow(\"Security Feed\", frame)\ncv2.imshow(\"Thresh\", thresh)\ncv2.imshow(\"Frame Delta\", frameDelta)\nkey = cv2.waitKey(1) & 0xFF\n# if the `q` key is pressed, break from the lop\nif key == ord(\"q\"):\nbreak\n# cleanup the camera and close any open windows\nvs.stop() if args.get(\"video\", None) is None else vs.release()\ncv2.destroyAllWindows()\nImágenesVideo del funcionamiento: https://youtu.be/GjlZmL9i3Mw"
}